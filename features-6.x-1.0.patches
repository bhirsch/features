diff -crB features_6.x-1.0-original//features.admin.inc features//features.admin.inc
*** features_6.x-1.0-original//features.admin.inc	2010-08-20 10:51:38.000000000 -0400
--- features//features.admin.inc	2011-02-24 19:21:34.762377947 -0500
***************
*** 222,227 ****
--- 222,236 ----
    if ($files = features_export_render($export, $module_name, TRUE)) {
      $filename = (!empty($export['version']) ? "{$module_name}-{$export['version']}" : $module_name) . '.tar';
  
+     // Give modules an opportunity to add files from files directory.
+     if ($add_files = features_export_files($export, $module_name)) {
+       foreach ($add_files as $add_file) {
+         $add_file->add_file = TRUE; 
+         $extension = $add_file->basename;
+         $files[$extension] = $add_file;
+       }
+     } 
+ 
      // Clear out output buffer to remove any garbage from tar output.
      if (ob_get_level()) {
        ob_end_clean();
***************
*** 233,243 ****
      $tar = array();
      $filenames = array();
      foreach ($files as $extension => $file_contents) {
!       if (!in_array($extension, array('module', 'info'))) {
          $extension .= '.inc';
        }
-       $filenames[] = "{$module_name}.$extension";
-       print features_tar_create("{$module_name}/{$module_name}.$extension", $file_contents);
      }
      if (features_get_modules($module_name, TRUE)) {
        $module_path = drupal_get_path('module', $module_name);
--- 242,264 ----
      $tar = array();
      $filenames = array();
      foreach ($files as $extension => $file_contents) {
!       if (!in_array($extension, array('module', 'info')) && !$file_contents->add_file) {
          $extension .= '.inc';
+       } 
+       if (in_array($extension, array('module', 'info')) || substr($extension, -3) == 'inc') {
+         $filenames[] = "{$module_name}.$extension";
+         print features_tar_create("{$module_name}/{$module_name}.$extension", $file_contents);
+       } else if ($file_contents->add_file) { 
+         $subdir = $file_contents->subdir;
+         $filename = ($subdir) ? "$subdir/$extension" : "$extension" ;
+         if (!in_array($filename, $filenames)) {
+           $filenames[] = $filename;
+           if ($contents = file_get_contents($file_contents->filename)) {
+             print features_tar_create("{$module_name}/{$filename}", $contents);
+             unset($contents);
+           }
+         } 
        }
      }
      if (features_get_modules($module_name, TRUE)) {
        $module_path = drupal_get_path('module', $module_name);
diff -crB features_6.x-1.0-original//features.api.php features//features.api.php
*** features_6.x-1.0-original//features.api.php	2010-08-09 11:00:44.000000000 -0400
--- features//features.api.php	2011-02-24 19:21:34.762377947 -0500
***************
*** 341,343 ****
--- 341,381 ----
  /**
   * @}
   */
+ 
+ /**
+  * Add additional files to feature module. For example,
+  * image files uploaded to the files directory through 
+  * Drupal's web interface, or CSS files written to the 
+  * files directory by your module.
+  * 
+  * @param $export
+  *  Export array populated by features_populate().
+  *  $export gives your module all the component information 
+  *  find in a .info file. 
+  *
+  * @param $module_name
+  *  String, name of features module being created. 
+  *  This can be helpful for naming conventions like mymodule.mycomponent.ext.
+  *
+  * @return $add_files
+  *  Array. 
+  *     $add_files[n]->name = 'name';
+  *     $add_files[n]->basename = 'name.ext';
+  *     $add_files[n]->filename = 'path/to/file/name.ext';
+  *     $add_files[n]->subdir = subdirectory/inside/features/module
+  */
+ function hook_features_files($export, $module_name) {
+   $add_files = array();
+   if ($mycomponents = $export['features']['mycomponent']) {
+     // Get files for each component. 
+     foreach ($mycomponents as $name) {
+       // Get selector's CSS file
+       $add_files[$i]->name = $name;
+       $add_files[$i]->basename = $name .'.css'; 
+       $add_files[$i]->filename = file_directory_path() .'/mymodule/'. $name .'.css';
+       $add_files[$i]->subdir = 'css';
+       $i++;
+     }
+   }
+   return $add_files;
+ }
diff -crB features_6.x-1.0-original//features.drush.inc features//features.drush.inc
*** features_6.x-1.0-original//features.drush.inc	2010-07-29 19:47:48.000000000 -0400
--- features//features.drush.inc	2011-02-24 19:21:34.762377947 -0500
***************
*** 249,259 ****
          $export['name'] = $module_name;
        }
        $files = features_export_render($export, $module_name, TRUE);
        foreach ($files as $extension => $file_contents) {
!         if (!in_array($extension, array('module', 'info'))) {
            $extension .= '.inc';
          }
!         drush_op('file_put_contents', "{$directory}/{$module_name}.$extension", $file_contents);
        }
        drush_log(dt("Created module: !module in !directory", array('!module' => $module_name, '!directory' => $directory)), 'ok');
      }
--- 249,286 ----
          $export['name'] = $module_name;
        }
        $files = features_export_render($export, $module_name, TRUE);
+ 
+       // Give modules an opportunity to add files from files directory.
+       if ($add_files = features_export_files($export, $module_name)) {
+         foreach ($add_files as $add_file) {
+           $add_file->add_file = TRUE; 
+           $extension = $add_file->basename;
+           $files[$extension] = $add_file;
+         }
+       } 
+ 
        foreach ($files as $extension => $file_contents) {
!         if (!in_array($extension, array('module', 'info')) && !$file_contents->add_file) {
            $extension .= '.inc';
          }
!         if (in_array($extension, array('module', 'info')) || substr($extension, -3) == 'inc') {
!           drush_op('file_put_contents', "{$directory}/{$module_name}.$extension", $file_contents);
!         } else if ($file_contents->add_file) { 
!           $subdir = $file_contents->subdir;
!           if ($subdir) {
!             $filename = $subdir .'/'. $extension; 
!             drush_op('mkdir', "$directory/images", 0755);
!             drush_op('mkdir', "$directory/$subdir", 0755);
!           } else {
!             $filename = $extension;
!           }
!           if (drush_op('file_exists', $file_contents->filename)) {
!            if ($contents = drush_op('file_get_contents', $file_contents->filename)) {
!              drush_op('file_put_contents', "{$directory}/$filename", $contents);
!              unset($contents);
!            }
!           }
!         }
        }
        drush_log(dt("Created module: !module in !directory", array('!module' => $module_name, '!directory' => $directory)), 'ok');
      }
diff -crB features_6.x-1.0-original//features.export.inc features//features.export.inc
*** features_6.x-1.0-original//features.export.inc	2010-08-11 15:49:05.000000000 -0400
--- features//features.export.inc	2011-02-24 19:21:34.762377947 -0500
***************
*** 254,259 ****
--- 254,278 ----
  }
  
  /**
+  * Give modules/components a chance to add files from files directory. 
+  * 
+  * @param $export
+  *  An exported feature definition.
+  * @param $module_name
+  *  The name of the module to be exported.
+  *
+  * @return $files array, with file names and paths of additional files.
+  */
+ function features_export_files($export, $module_name) {
+   // Get additional files.
+   $add_files = array();
+   $add_files = module_invoke_all('features_files', $export, $module_name);
+ 
+   return $add_files;  
+ }
+ 
+ 
+ /**
   * Detect differences between DB and code components of a feature.
   */
  function features_detect_overrides($module) {
Only in features/: .git
Only in features/: patches
diff -crB features_6.x-1.0-original//README.txt features//README.txt
*** features_6.x-1.0-original//README.txt	2010-07-05 10:28:33.000000000 -0400
--- features//README.txt	2011-02-24 19:21:34.762377947 -0500
***************
*** 1,164 ****
! $Id: README.txt,v 1.1.2.5 2010/07/05 14:28:33 yhahn Exp $
! 
! Features 1.x for Drupal 6.x
! ---------------------------
! The features module enables the capture and management of features in Drupal. A
! feature is a collection of Drupal entities which taken together satisfy a
! certain use-case.
! 
! Features provides a UI and API for taking different site building components
! from modules with exportables and bundling them together in a single feature
! module. A feature module is like any other Drupal module except that it declares
! its components (e.g. views, contexts, CCK fields, etc.) in its `.info` file so
! that it can be checked, updated, or reverted programmatically.
! 
! Examples of features might be:
! 
! - A blog
! - A pressroom
! - An image gallery
! - An e-commerce t-shirt store
! 
! 
! Installation
! ------------
! Features can be installed like any other Drupal module -- place it in the
! modules directory for your site and enable it on the `admin/build/modules` page.
! To take full advantage of some of the workflow benefits provided by Features,
! you should install [Drush][1].
! 
! 
! Basic usage
! -----------
! Features is geared toward usage by developers and site builders. It
! is not intended to be used by the general audience of your Drupal site.
! Features provides tools for accomplishing two important tasks:
! 
! ### Task 1: Export features
! 
! You can build features in Drupal by using site building tools that are supported
! (see a short list under the *Compatibility* section).
! 
! Once you've built and configured functionality on a site, you can export it into
! a feature module by using the feature create page at
! `admin/build/features/create`.
! 
! 
! ### Task 2: Manage features
! 
! The features module also provides a way to manage features through a more
! targeted interface than `admin/build/modules`. The interface at
! `admin/build/features` shows you only feature modules, and will also inform you
! if any of their components have been overridden. If this is the case, you can
! also re-create features to bring the module code up to date with any changes
! that have occurred in the database.
! 
! 
! Including custom code and adding to your feature
! ------------------------------------------------
! Once you've exported your feature you will see that you have several files:
! 
!     myfeature.info
!     myfeature.module
!     myfeature.[*].inc
! 
! You can add custom code (e.g. custom hook implementations, other functionality,
! etc.) to your feature in `myfeature.module` as you would with any other module.
! Do not change or add to any of the features `.inc` files unless you know what
! you are doing. These files are written to by features on updates so any custom
! changes may be overwritten.
! 
! 
! Using Features to manage development
! ------------------------------------
! Because Features provides a centralized way to manage exportable components and
! write them to code it can be used during development in conjunction with a
! version control like SVN or git as a way to manage changes between development,
! staging and production sites. An example workflow for a developer using Features
! is to:
! 
! 1. Make configuration changes to a feature on her local development site.
! 2. Update her local feature codebase using `drush features-update`.
! 3. Commit those changes using `svn commit`.
! 4. Roll out her changes to the development site codebase by running `svn update`
!   on the server. Other collaborating developers can also get her changes with
!   `svn update`.
! 5. Reverting any configuration on the staging site to match the updated codebase
! by running `drush features-revert`.
! 6. Rinse, repeat.
! 
! Features also provides integration with the [Diff][3] module if enabled to show
! differences between configuration in the database and that in code. For site
! builders interested in using Features for development, enabling the diff module
! and reading `API.txt` for more details on the inner workings of Features is
! highly recommended.
! 
! 
! Drush usage
! -----------
! Features provides several useful drush commands:
! 
! - `drush features`
! 
!   List all the available features on your site and their status.
! 
! - `drush features-export [feature name] [component list]`
! 
!   Write a new feature in code containing the components listed.
! 
! - `drush features-update [feature name]`
! 
!   Update the code of an existing feature to include any overrides/changes in
!   your database (e.g. a new view).
! 
! - `drush features-revert [feature name]`
! 
!   Revert the components of a feature in your site's database to the state
!   described in your feature module's defaults.
! 
! - `drush features-diff [feature name]`
! 
!   Show a diff between a feature's database components and those in code.
!   Requires the Diff module.
! 
! Additional commands and options can be found using `drush help`.
! 
! 
! Compatibility
! -------------
! Features provides integration for the following exportables:
! 
! - CTools export API implementers (Context, Spaces, Boxes, Strongarm, Page
!   Manager)
! - ImageCache
! - Views
! - [Other contributed modules][2]
  
! Features also provides faux-exportable functionality for the following Drupal
! core and contrib components:
  
! - CCK fields
! - CCK fieldgroups
! - Content types
! - Input filters
! - User roles/permissions
! - Custom menus and menu links *
! - Taxonomy vocabularies *
  
! * Currently in development.
  
  
! For developers
  --------------
! Please read `API.txt` for more information about the concepts and integration
! points in the Features module.
! 
  
- Maintainers
- -----------
- - yhahn (Young Hahn)
- - jmiccolis (Jeff Miccolis)
  
  
- [1]: http://drupal.org/project/drush
- [2]: (http://drupal.org/taxonomy/term/11478)
--- 1,33 ----
! README.txt
! --------------
! This is a working copy of the Drupal Features module. 
! http://drupal.org/project/features
  
! I have replaced the normal README.txt with this file to 
! explain the patches included here. 
  
! Patches included in this version of features aim to enable features 
! to ship with CSS files and image files. Features 1.0 on drupal.org
! currently only exports .info, .module and .inc files. 
  
! - Bryan Hirsch, bryan AT bryanhirsch DOT com
  
  
! Patched files
  --------------
! features.api.php, documentation of hook_features_files().
! features.admin.inc, call new hook to include arbitrary files proviced by implementing modules. 
  
  
+ Notes/Explaination
+ -------------------
+ The most direct path I see here is to patch the 
+ features_export_build_form_submit() function in features.admin.inc,
+ to call a new hook, hook_features_files().
+ 
+ Long-term, I think a better approach would be to modify features_export_render() and
+ the functions it calls, to enable features components to write .css and .js 
+ files on the fly, then have features_export_build_form_submit() handle 
+ all these different files sent back by features_export_render(). But for a 
+ proof-of-concept, it seemed better to keep it simple. 
  
